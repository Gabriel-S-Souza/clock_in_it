// Mocks generated by Mockito 5.4.2 from annotations
// in clock_in_it/test/mocks/build_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:clock_in_it/features/auth/data/data_sources/auth_datasource.dart'
    as _i13;
import 'package:clock_in_it/features/auth/data/models/login_credentials_model.dart'
    as _i14;
import 'package:clock_in_it/features/auth/domain/entities/login_credentials_entity.dart'
    as _i16;
import 'package:clock_in_it/features/auth/domain/repositories/auth_repository.dart'
    as _i15;
import 'package:clock_in_it/features/auth/domain/use_cases/auth_use_case.dart'
    as _i17;
import 'package:clock_in_it/features/auth/presentation/blocs/login_bloc.dart'
    as _i18;
import 'package:clock_in_it/features/auth/presentation/blocs/login_state.dart'
    as _i5;
import 'package:clock_in_it/features/employee/data/data_sources/cache/employee_cacheable_data_source.dart'
    as _i23;
import 'package:clock_in_it/features/employee/data/data_sources/remote/employee_data_source.dart'
    as _i20;
import 'package:clock_in_it/features/employee/data/models/employee_detail_model.dart'
    as _i22;
import 'package:clock_in_it/features/employee/data/models/employee_model.dart'
    as _i21;
import 'package:clock_in_it/features/employee/domain/entities/employee_details_entity.dart'
    as _i26;
import 'package:clock_in_it/features/employee/domain/entities/employee_entity.dart'
    as _i25;
import 'package:clock_in_it/features/employee/domain/repositories/employee_repository.dart'
    as _i24;
import 'package:clock_in_it/features/employee/domain/use_cases/employee_use_case.dart'
    as _i27;
import 'package:clock_in_it/setup/http/http_client.dart' as _i6;
import 'package:clock_in_it/shared/data/data_sources/local_storage/local_storage_data_source.dart'
    as _i9;
import 'package:clock_in_it/shared/data/data_sources/secure_local_storage/secure_local_storage.dart'
    as _i8;
import 'package:clock_in_it/shared/domain/entities/failure/failure.dart' as _i3;
import 'package:clock_in_it/shared/domain/entities/response/response.dart'
    as _i2;
import 'package:clock_in_it/shared/domain/entities/result/result.dart' as _i4;
import 'package:clock_in_it/shared/domain/entities/user/user_entity.dart'
    as _i11;
import 'package:clock_in_it/shared/domain/repositories/local_storage_repository.dart'
    as _i10;
import 'package:clock_in_it/shared/domain/use_cases/local_storage_use_case.dart'
    as _i12;
import 'package:flutter_bloc/flutter_bloc.dart' as _i19;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponseApp_0<T> extends _i1.SmartFake
    implements _i2.ResponseApp<T> {
  _FakeResponseApp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFailure_1 extends _i1.SmartFake implements _i3.Failure {
  _FakeFailure_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_2<T> extends _i1.SmartFake implements _i4.Result<T> {
  _FakeResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginState_3 extends _i1.SmartFake implements _i5.LoginState {
  _FakeLoginState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.ResponseApp<dynamic>> get(
    String? url, {
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#token: token},
        ),
        returnValue: _i7.Future<_i2.ResponseApp<dynamic>>.value(
            _FakeResponseApp_0<dynamic>(
          this,
          Invocation.method(
            #get,
            [url],
            {#token: token},
          ),
        )),
      ) as _i7.Future<_i2.ResponseApp<dynamic>>);
  @override
  _i7.Future<_i2.ResponseApp<dynamic>> post(
    String? path, {
    required Map<String, dynamic>? body,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #body: body,
            #token: token,
          },
        ),
        returnValue: _i7.Future<_i2.ResponseApp<dynamic>>.value(
            _FakeResponseApp_0<dynamic>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #body: body,
              #token: token,
            },
          ),
        )),
      ) as _i7.Future<_i2.ResponseApp<dynamic>>);
  @override
  _i7.Future<_i2.ResponseApp<dynamic>> put(
    String? path, {
    required Map<String, dynamic>? body,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #body: body,
            #token: token,
          },
        ),
        returnValue: _i7.Future<_i2.ResponseApp<dynamic>>.value(
            _FakeResponseApp_0<dynamic>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #body: body,
              #token: token,
            },
          ),
        )),
      ) as _i7.Future<_i2.ResponseApp<dynamic>>);
  @override
  _i7.Future<_i2.ResponseApp<dynamic>> delete(
    String? path, {
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {#token: token},
        ),
        returnValue: _i7.Future<_i2.ResponseApp<dynamic>>.value(
            _FakeResponseApp_0<dynamic>(
          this,
          Invocation.method(
            #delete,
            [path],
            {#token: token},
          ),
        )),
      ) as _i7.Future<_i2.ResponseApp<dynamic>>);
  @override
  _i3.Failure handleError(Object? e) => (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [e],
        ),
        returnValue: _FakeFailure_1(
          this,
          Invocation.method(
            #handleError,
            [e],
          ),
        ),
      ) as _i3.Failure);
}

/// A class which mocks [SecureLocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureLocalStorage extends _i1.Mock
    implements _i8.SecureLocalStorage {
  MockSecureLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> set(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<String?> get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);
  @override
  _i7.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [LocalStorageDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageDataSource extends _i1.Mock
    implements _i9.LocalStorageDataSource {
  MockLocalStorageDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> set(
    String? key, {
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [key],
          {#value: value},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> setList(
    String? key, {
    required List<String>? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setList,
          [key],
          {#value: value},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  String? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as String?);
  @override
  List<String>? getList(String? key) => (super.noSuchMethod(Invocation.method(
        #getList,
        [key],
      )) as List<String>?);
  @override
  _i7.Future<bool> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [LocalStorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageRepository extends _i1.Mock
    implements _i10.LocalStorageRepository {
  MockLocalStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> saveUser(_i11.UserEntity? user) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [user],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> set(
    String? key, {
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [key],
          {#value: value},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> setList(
    String? key, {
    required List<String>? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setList,
          [key],
          {#value: value},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  String? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as String?);
  @override
  List<String>? getList(String? key) => (super.noSuchMethod(Invocation.method(
        #getList,
        [key],
      )) as List<String>?);
  @override
  _i7.Future<bool> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [LocalStorageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageUseCase extends _i1.Mock
    implements _i12.LocalStorageUseCase {
  MockLocalStorageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> saveUser(_i11.UserEntity? user) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [user],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> set(
    String? key, {
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [key],
          {#value: value},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> setList(
    String? key, {
    required List<String>? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setList,
          [key],
          {#value: value},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  String? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as String?);
  @override
  List<String>? getList(String? key) => (super.noSuchMethod(Invocation.method(
        #getList,
        [key],
      )) as List<String>?);
  @override
  _i7.Future<bool> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [AuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDataSource extends _i1.Mock implements _i13.AuthDataSource {
  MockAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Result<_i11.UserEntity>> login(
          _i14.LoginCredentialsModel? credentials) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [credentials],
        ),
        returnValue: _i7.Future<_i4.Result<_i11.UserEntity>>.value(
            _FakeResult_2<_i11.UserEntity>(
          this,
          Invocation.method(
            #login,
            [credentials],
          ),
        )),
      ) as _i7.Future<_i4.Result<_i11.UserEntity>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i15.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Result<_i11.UserEntity>> login(
          _i16.LoginCredentialsEntity? credentials) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [credentials],
        ),
        returnValue: _i7.Future<_i4.Result<_i11.UserEntity>>.value(
            _FakeResult_2<_i11.UserEntity>(
          this,
          Invocation.method(
            #login,
            [credentials],
          ),
        )),
      ) as _i7.Future<_i4.Result<_i11.UserEntity>>);
}

/// A class which mocks [AuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUseCase extends _i1.Mock implements _i17.AuthUseCase {
  MockAuthUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Result<_i11.UserEntity>> login(
          _i16.LoginCredentialsEntity? credentials) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [credentials],
        ),
        returnValue: _i7.Future<_i4.Result<_i11.UserEntity>>.value(
            _FakeResult_2<_i11.UserEntity>(
          this,
          Invocation.method(
            #login,
            [credentials],
          ),
        )),
      ) as _i7.Future<_i4.Result<_i11.UserEntity>>);
}

/// A class which mocks [LoginBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginBloc extends _i1.Mock implements _i18.LoginBloc {
  MockLoginBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.LoginState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLoginState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.LoginState);
  @override
  _i7.Stream<_i5.LoginState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i5.LoginState>.empty(),
      ) as _i7.Stream<_i5.LoginState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i7.Future<void> login(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            username,
            password,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  void emit(_i5.LoginState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i19.Change<_i5.LoginState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [EmployeeDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmployeeDataSource extends _i1.Mock
    implements _i20.EmployeeDataSource {
  MockEmployeeDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Result<List<_i21.EmployeeModel>>> getEmployees() =>
      (super.noSuchMethod(
        Invocation.method(
          #getEmployees,
          [],
        ),
        returnValue: _i7.Future<_i4.Result<List<_i21.EmployeeModel>>>.value(
            _FakeResult_2<List<_i21.EmployeeModel>>(
          this,
          Invocation.method(
            #getEmployees,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Result<List<_i21.EmployeeModel>>>);
  @override
  _i7.Future<_i4.Result<_i22.EmployeeDetailsModel>> getDetails(
          String? employeeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetails,
          [employeeId],
        ),
        returnValue: _i7.Future<_i4.Result<_i22.EmployeeDetailsModel>>.value(
            _FakeResult_2<_i22.EmployeeDetailsModel>(
          this,
          Invocation.method(
            #getDetails,
            [employeeId],
          ),
        )),
      ) as _i7.Future<_i4.Result<_i22.EmployeeDetailsModel>>);
}

/// A class which mocks [EmployeeCacheableDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmployeeCacheableDataSource extends _i1.Mock
    implements _i23.EmployeeCacheableDataSource {
  MockEmployeeCacheableDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Result<List<_i21.EmployeeModel>>> getEmployees() =>
      (super.noSuchMethod(
        Invocation.method(
          #getEmployees,
          [],
        ),
        returnValue: _i7.Future<_i4.Result<List<_i21.EmployeeModel>>>.value(
            _FakeResult_2<List<_i21.EmployeeModel>>(
          this,
          Invocation.method(
            #getEmployees,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Result<List<_i21.EmployeeModel>>>);
  @override
  _i7.Future<_i4.Result<_i22.EmployeeDetailsModel>> getDetails(
          String? employeeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetails,
          [employeeId],
        ),
        returnValue: _i7.Future<_i4.Result<_i22.EmployeeDetailsModel>>.value(
            _FakeResult_2<_i22.EmployeeDetailsModel>(
          this,
          Invocation.method(
            #getDetails,
            [employeeId],
          ),
        )),
      ) as _i7.Future<_i4.Result<_i22.EmployeeDetailsModel>>);
}

/// A class which mocks [EmployeeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmployeeRepository extends _i1.Mock
    implements _i24.EmployeeRepository {
  MockEmployeeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Result<List<_i25.EmployeeEntity>>> getEmployees() =>
      (super.noSuchMethod(
        Invocation.method(
          #getEmployees,
          [],
        ),
        returnValue: _i7.Future<_i4.Result<List<_i25.EmployeeEntity>>>.value(
            _FakeResult_2<List<_i25.EmployeeEntity>>(
          this,
          Invocation.method(
            #getEmployees,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Result<List<_i25.EmployeeEntity>>>);
  @override
  _i7.Future<_i4.Result<_i26.EmployeeDetailsEntity>> getDetails(
          String? employeeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetails,
          [employeeId],
        ),
        returnValue: _i7.Future<_i4.Result<_i26.EmployeeDetailsEntity>>.value(
            _FakeResult_2<_i26.EmployeeDetailsEntity>(
          this,
          Invocation.method(
            #getDetails,
            [employeeId],
          ),
        )),
      ) as _i7.Future<_i4.Result<_i26.EmployeeDetailsEntity>>);
}

/// A class which mocks [EmployeeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmployeeUseCase extends _i1.Mock implements _i27.EmployeeUseCase {
  MockEmployeeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Result<List<_i25.EmployeeEntity>>> getEmployees() =>
      (super.noSuchMethod(
        Invocation.method(
          #getEmployees,
          [],
        ),
        returnValue: _i7.Future<_i4.Result<List<_i25.EmployeeEntity>>>.value(
            _FakeResult_2<List<_i25.EmployeeEntity>>(
          this,
          Invocation.method(
            #getEmployees,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Result<List<_i25.EmployeeEntity>>>);
  @override
  _i7.Future<_i4.Result<_i26.EmployeeDetailsEntity>> getDetails(
          String? employeeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetails,
          [employeeId],
        ),
        returnValue: _i7.Future<_i4.Result<_i26.EmployeeDetailsEntity>>.value(
            _FakeResult_2<_i26.EmployeeDetailsEntity>(
          this,
          Invocation.method(
            #getDetails,
            [employeeId],
          ),
        )),
      ) as _i7.Future<_i4.Result<_i26.EmployeeDetailsEntity>>);
}
